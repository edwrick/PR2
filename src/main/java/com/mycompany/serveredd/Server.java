/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.serveredd;
import com.mycompany.serveredd.listaCD.Nodo;
import com.rabbitmq.client.BuiltinExchangeType;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.DeliverCallback;
import javax.swing.JFileChooser;
import java.io.File;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author edwrick
 */
public class Server extends javax.swing.JFrame {
    
    /**
     * Creates new form Server
     */
    int n=0,m=0;
    listaCD capas = new listaCD();
    TreeGen arbolito1 = new TreeGen();
    TreeGen arbolito2 = new TreeGen();
    public static String mostrar="";
    public boolean player1=false,start=false,relisten=false;
    private final static String preguntar = "preguntar";
    private final static String QUEUE_NAME = "serverToClient";
    private final static String QUEUE_NAME3 = "serverToClient2";
    private final static String QUEUE_NAME2 = "ClientToServer";
    public Server() {
        initComponents();
        txtLog.setText("****** Registro de actividades ******");
        capas.add("Agua", 0);
        capas.add("Grama", 1);
        capas.add("Arboles", 2);
        capas.add("Carretera", 3);
        capas.add("Monta√±a", 4);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cbPlayers = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        cbCapas = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cbShip = new javax.swing.JComboBox<>();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        txtX = new javax.swing.JTextField();
        txtY = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtY1 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        txtIdTropa = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Tropas"));

        cbPlayers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "J1", "J2" }));

        jButton1.setText("Cargar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Graficar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbPlayers, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(cbPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtLog.setBackground(java.awt.Color.black);
        txtLog.setColumns(20);
        txtLog.setForeground(java.awt.Color.green);
        txtLog.setToolTipText("");
        txtLog.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));
        jScrollPane1.setViewportView(txtLog);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Capa"));

        cbCapas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4" }));
        cbCapas.setName(""); // NOI18N

        jButton4.setText("Cargar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Graficar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Eliminar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbCapas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(cbCapas, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Mapa"));

        cbShip.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Inf", "InfM", "Rec", "Tanque", "MTanque", "Arti" }));

        jButton8.setText("Insertar");

        jButton9.setText("Eliminar");

        jLabel1.setText("X:");

        jLabel2.setText("Y:");

        jLabel3.setText("Capa:");

        jButton7.setText("Graficar");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton11.setText("Grafica Funcional");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel1))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(34, 34, 34)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtY, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                                    .addComponent(txtX)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtY1)))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbShip, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbShip, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtX, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton8)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtY, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtY1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addComponent(jButton9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton10.setText("Iniciar Partida");
        jButton10.setToolTipText("");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel4.setText("Id Tropa:");

        jButton3.setText("Eliminar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 21, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIdTropa, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(22, 22, 22)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(626, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIdTropa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jButton3))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(22, 22, 22)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(261, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int cbindex = cbCapas.getSelectedIndex();
        Nodo capita = capas.getByLvl(cbindex);
        JFileChooser fileChooser = new JFileChooser();
        FileReader fr = null;
        BufferedReader br = null;
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
    // user selects a file
            File selectedFile = fileChooser.getSelectedFile();
            try {
                // Apertura del fichero y creacion de BufferedReader para poder
                // hacer una lectura comoda (disponer del metodo readLine()).
                fr = new FileReader (selectedFile);
                br = new BufferedReader(fr);

                // Lectura del fichero
                String linea=br.readLine();
                
                while(linea!=null && !linea.equals("") )
                {
                    String[] info = linea.split(",");
                    String strTemp = info[0].trim();
                    int x = Integer.parseInt(strTemp);
                    if(x>n) n=x;
                    String[] info2 = info[1].split(";");
                    int y = Integer.parseInt(info2[0]);
                    if(y>m) m=y;
                    switch(cbindex){
                        case 0:
                            capita.mat.insert(0,x, y, "deepskyblue");
                            txtLog.setText(txtLog.getText()+"\n"+"Se ha ingresado dado en: "+x+","+y);
                        break;
                        case 1:
                            capita.mat.insert(0,x, y, "greenyellow");
                            txtLog.setText(txtLog.getText()+"\n"+"Se ha ingresado dado en: "+x+","+y);
                        break;
                        case 2:
                            capita.mat.insert(0,x, y, "chartreuse4");
                            txtLog.setText(txtLog.getText()+"\n"+"Se ha ingresado dado en: "+x+","+y);
                        break;
                        case 3:
                            capita.mat.insert(0,x, y, "bisque4");
                            txtLog.setText(txtLog.getText()+"\n"+"Se ha ingresado dado en: "+x+","+y);
                        break;
                        case 4:
                            capita.mat.insert(0,x, y, "chocolate");
                            txtLog.setText(txtLog.getText()+"\n"+"Se ha ingresado dado en: "+x+","+y);
                        break;
                    }
                    linea=br.readLine();
                }
            }
             catch(Exception e){
                e.printStackTrace();
             }finally{
                // En el finally cerramos el fichero, para asegurarnos
                // que se cierra tanto si todo va bien como si salta 
                // una excepcion.
                try{                    
                   if( null != fr ){   
                      fr.close();     
                   }                  
                }catch (Exception e2){ 
                   e2.printStackTrace();
                }
             }
        }
        System.out.println("Prueba");
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        try {
            // TODO add your handling code here:
            receive();
            
        } catch (Exception ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
        recursiveListen();
    }//GEN-LAST:event_jButton10ActionPerformed
    public void recursiveListen(){
        if(relisten){
            try {
                relisten=false;
                receive();
                recursiveListen();
            } catch (Exception ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        
    }
    
    public void assign(String mensaje) throws Exception{
         ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost");
        Connection connection = factory.newConnection();
        Channel channel = connection.createChannel();
        try
              {
            channel.queueDeclare(preguntar, false, false, false, null);
            String message = mensaje;
            channel.basicPublish("", preguntar, null, message.getBytes("UTF-8"));
            System.out.println(" [x] Sent '" + message + "'");
        }finally {
            channel.close();
            connection.close();
        }
    }
    
    public void receive() throws Exception{
        
        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost");
        Connection connection = factory.newConnection();
        Channel channel = connection.createChannel();

        channel.queueDeclare(QUEUE_NAME2, false, false, false, null);
        if(!start) txtLog.setText(txtLog.getText()+"\n"+"Esperando conexion de Jugadores... ");

        DeliverCallback deliverCallback = (consumerTag, delivery) -> {
            String message = new String(delivery.getBody(), "UTF-8");
            if(message.equals("connect")){
                
                if(!start){
                    start=true;
                    
                    try {
                    assign("J1");
                    player1=true;
                    //
                        mostrar="Jugador 1 conectado.";
                        StringBuilder emisor = new StringBuilder("J1:");
                        emisor.append(arbolito1.getTroops(arbolito1.root));
                        Thread.sleep(500);
                        send(emisor.toString());
                        relisten=true;
                    } catch (Exception ex) {
                        Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }else{
                    
                        try {
                            mostrar="Jugador 2 conectado.";
                            assign("J2");
                            StringBuilder emisor = new StringBuilder("J2:");
                            emisor.append(arbolito2.getTroops(arbolito2.root));
                            send2(emisor.toString());
                            send("J1:start");
                            relisten=true;
                        } catch (Exception ex) {
                            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                        }
                }
            }else if(message.contains("J1")){
                if(message.contains("end")){
                    try {
                        player1=false;
                        mostrar="Turno de Jugador 1 terminado.";
                        StringBuilder emisor = new StringBuilder("J2:");
                            emisor.append(arbolito2.getTroops(arbolito2.root));
                            send2(emisor.toString());
                            send2("J2:start");
                            relisten=true;
                    } catch (Exception ex) {
                        Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }else if(message.contains("at")){
                    
                }else{
                    
                }
            }else if(message.contains("J2")){
                if(message.contains("end")){
                    try {
                        player1=true;
                        mostrar="Turno de Jugador 2 terminado.";
                        StringBuilder emisor = new StringBuilder("J1:");
                        emisor.append(arbolito1.getTroops(arbolito1.root));
                        send(emisor.toString());
                        send("J1:start");
                        relisten=true;
                    } catch (Exception ex) {
                        Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else if(message.contains("at")){
                    
                }else{
                    
                }
            }
            message="";
        };
        txtLog.setText(txtLog.getText()+"\n"+mostrar);
        
        channel.basicConsume(QUEUE_NAME2, true, deliverCallback, consumerTag -> { });
        
    }
    
    public void logSend(String mensaje) throws Exception{
         ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost");
        try (Connection connection = factory.newConnection();
             Channel channel = connection.createChannel()) {
            channel.exchangeDeclare(QUEUE_NAME, BuiltinExchangeType.DIRECT);
            
            
            String message = mensaje;

            channel.basicPublish(QUEUE_NAME, "", null, message.getBytes("UTF-8"));
            System.out.println(" [x] Sent '"  + "':'" + message + "'");
        }
    }
    public void logSend2(String mensaje) throws Exception{
         ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost");
        try (Connection connection = factory.newConnection();
             Channel channel = connection.createChannel()) {
            channel.exchangeDeclare(QUEUE_NAME3, BuiltinExchangeType.DIRECT);
            
            
            String message = mensaje;

            channel.basicPublish(QUEUE_NAME3, "", null, message.getBytes("UTF-8"));
            System.out.println(" [x] Sent '"  + "':'" + message + "'");
        }
    }
    
    public void send(String mensaje)throws Exception{
        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost");
        Connection connection = factory.newConnection();
        Channel channel = connection.createChannel();
        try
              {
            channel.queueDeclare(QUEUE_NAME, false, false, false, null);
            String message = mensaje;
            channel.basicPublish("", QUEUE_NAME, null, message.getBytes("UTF-8"));
            System.out.println(" [x] Sent '" + message + "'");
        }finally {
            channel.close();
            connection.close();
        }
    }
    public void send2(String mensaje)throws Exception{
        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost");
        Connection connection = factory.newConnection();
        Channel channel = connection.createChannel();
        try
              {
            channel.queueDeclare(QUEUE_NAME3, false, false, false, null);
            String message = mensaje;
            channel.basicPublish("", QUEUE_NAME3, null, message.getBytes("UTF-8"));
            System.out.println(" [x] Sent '" + message + "'");
        }finally {
            channel.close();
            connection.close();
        }
    }
    
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        int cbindex = cbCapas.getSelectedIndex();
        Nodo capita = capas.getByLvl(cbindex);
        try {
            capita.mat.dot();
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            // TODO add your handling code here:
            StringBuilder texto = new StringBuilder("digraph G {");
            StringBuilder colision = new StringBuilder();
            texto.append("\n nodesep=0; \r\n  node [shape=record,width=2,style = filled];\r\n");
            for(int i=0;i<m+1;i++){
                for(int j=0;j<n+1;j++){
                    NodoOrto tempOrto = rebuscar(j, i, 4);
                    if(tempOrto!=null){
                        texto.append("\r\n node"+tempOrto.x+"Y"+tempOrto.y+" [label = \"Tropa:"+tempOrto.nombreTropa+" Contador:"+(tempOrto.c-1));
                        texto.append("\",group=X"+tempOrto.x+",color="+tempOrto.elemento+"];\n");
                    }
                }
            }
            for(int i=0;i<m+1;i++){
                texto.append("\r\n{rank=same;");
                for(int j=0;j<n+1;j++){
                    NodoOrto tempOrto = rebuscar(j, i, 4);
                    if(tempOrto!=null){
                        texto.append("node"+tempOrto.x+"Y"+tempOrto.y).append(";");
                        
                    }
                }
                texto.append("}\r\n");
                for(int j=0;j<n+1;j++){
                    NodoOrto tempOrto = rebuscar(j, i, 4);
                    NodoOrto tempOrtoDer = rebuscar(j, i+1, 4);
                    if(tempOrto!=null &&tempOrtoDer!=null) texto.append("\r\n node"+tempOrto.x+"Y"+tempOrto.y).append("->").append("node"+tempOrtoDer.x+"Y"+tempOrtoDer.y);
                }
                for(int j=0;j<n+1;j++){
                    NodoOrto tempOrto = rebuscar(j, i, 4);
                    NodoOrto tempOrtoDown  = rebuscar(j+1, i, 4);
                    if(tempOrto!=null &&tempOrtoDown!=null) texto.append("\r\n node"+tempOrto.x+"Y"+tempOrto.y).append("->").append("node"+tempOrtoDown.x+"Y"+tempOrtoDown.y);
                }
            }
            texto.append("}");
            File archivo = new File("mapa.dot");
            BufferedWriter bw;
            bw =new BufferedWriter(new FileWriter(archivo));
            bw.write(texto.toString());
            bw.close();
            Runtime.getRuntime().exec("dot -Tpng mapa.dot -o mapa.png");
            Runtime.getRuntime().exec("feh mapa.png");
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int cbPJ = cbPlayers.getSelectedIndex();
        
        JFileChooser fileChooser = new JFileChooser();
        FileReader fr = null;
        BufferedReader br = null;
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
    // user selects a file
            File selectedFile = fileChooser.getSelectedFile();
            try {
                // Apertura del fichero y creacion de BufferedReader para poder
                // hacer una lectura comoda (disponer del metodo readLine()).
                fr = new FileReader (selectedFile);
                br = new BufferedReader(fr);

                // Lectura del fichero
                String linea=br.readLine();
                
                while(linea!=null && !linea.equals("") )
                {
                    String[] info = linea.split(",");
                    String strTemp = info[0].trim();
                    int x = Integer.parseInt(strTemp);
                    strTemp = info[1].trim();
                    int y = Integer.parseInt(strTemp);
                    if(x>n) n=x;
                    if(y>m) m=y;
                    String[] info2 = info[2].split(";");
                    int id = Integer.parseInt(info2[0]); 
                    switch(cbPJ){
                        case 0:
                            try{
                                NodoOrto tempOrto=null;
                                int i=0;
                                for(i=0;i<=4;i++){
                                    Nodo capita = capas.getByLvl(i);
                                    if(capita==null) continue;
                                    NodoHeader tempH = capita.mat.h.buscar(x);
                                    if(tempH==null) continue;
                                    tempOrto = tempH.column.get(y);
                                    if(tempOrto!=null) break;
                                }
                                if(tempOrto!=null){
                                    
                                    if(tempOrto.nota==0){
                                    tempOrto.c++;
                                    tempOrto.nota= id;
                                    tempOrto.nombreTropa=info2[1];
                                    arbolito1.insertTree(id, x, y,i, n);
                                    txtLog.setText(txtLog.getText()+"\r\n"+"Se ha agregado tropa: "+info2[1]+" en nivel: "+i+" en coordenada: "+x+","+y);
                                    }else txtLog.setText(txtLog.getText()+"\r\n"+"Error en insercion, posicion ocupada.");
                                    
                                }
                                
                            }catch(Exception ex){
                                System.out.println("Error, coordenada no encontrada en ninguna capa.");
                            }
                            
                        break;
                        case 1:
                            try{
                                NodoOrto tempOrto=null;
                                int i=0;
                                for(i=0;i<=4;i++){
                                    Nodo capita = capas.getByLvl(i);
                                    if(capita==null) continue;
                                    NodoHeader tempH = capita.mat.h.buscar(x);
                                    if(tempH==null) continue;
                                    tempOrto = tempH.column.get(y);
                                    if(tempOrto!=null) break;
                                }
                                if(tempOrto!=null){
                                    if(tempOrto.nota==0){
                                        tempOrto.c++;
                                    tempOrto.nota= id;
                                    arbolito2.insertTree(id, x, y,i, n);
                                    txtLog.setText(txtLog.getText()+"\r\n"+"Se ha agregado tropa: "+info2[1]+" en nivel: "+i+" en coordenada: "+x+","+y);
                                    }else txtLog.setText(txtLog.getText()+"\r\n"+"Error en insercion, posicion ocupada.");
                                    
                                }
                                
                            }catch(Exception ex){
                                System.out.println("Error, coordenada no encontrada en ninguna capa.");
                            }
                        break;
                       
                    }
                    linea=br.readLine();
                }
            }
             catch(Exception e){
                e.printStackTrace();
             }finally{
                // En el finally cerramos el fichero, para asegurarnos
                // que se cierra tanto si todo va bien como si salta 
                // una excepcion.
                try{                    
                   if( null != fr ){   
                      fr.close();     
                   }                  
                }catch (Exception e2){ 
                   e2.printStackTrace();
                }
             }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        switch(cbPlayers.getSelectedIndex()){
            case 0:
                arbolito1.generateGrap();
                break;
            case 1:
                arbolito2.generateGrap();
                break;
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int arbol =0;
        TreeNode tempNode = arbolito1.search(arbolito1.root, Integer.parseInt(txtIdTropa.getText()));
        if(tempNode!=null) arbol=1;
        if(tempNode==null){
            tempNode = arbolito2.search(arbolito2.root, Integer.parseInt(txtIdTropa.getText()));
            if(tempNode!=null) arbol=2;
        }
        if(tempNode!=null){
                                NodoOrto tempOrto=null;
                                int i=0;
                                for(i=0;i<=4;i++){
                                    Nodo capita = capas.getByLvl(i);
                                    if(capita==null) continue;
                                    NodoHeader tempH = capita.mat.h.buscar(tempNode.x);
                                    if(tempH==null) continue;
                                    tempOrto = tempH.column.get(tempNode.y);
                                    if(tempOrto!=null) break;
                                }
                                if(tempOrto!=null){
                                    tempOrto.nota=0;
                                    tempOrto.nombreTropa="";
                                    if(arbol==1){
                                        arbolito1.removeTree(tempNode.id);
                                    }else if(arbol==2){
                                        arbolito2.removeTree(tempNode.id);
                                    }
                                }
        }
                                
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        capas.del(cbCapas.getSelectedIndex());
        cbCapas.removeItemAt(cbCapas.getSelectedIndex());
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            StringBuilder texto = new StringBuilder("digraph G {");
            StringBuilder colision = new StringBuilder();
            texto.append("\n nodesep=0; \r\n  node [shape=record,width=2,style = filled];\r\n");
            for(int i=0;i<m+1;i++){
                for(int j=0;j<n+1;j++){
                    NodoOrto tempOrto = rebuscar(j, i, 4);
                    if(tempOrto!=null){
                        texto.append("\r\n node"+tempOrto.x+"Y"+tempOrto.y+" [label=\"\"");
                        texto.append(",group=X"+tempOrto.x+",color="+tempOrto.elemento+"];\n");
                    }
                }
            }
            for(int i=0;i<m+1;i++){
                texto.append("\r\n{rank=same;");
                for(int j=0;j<n+1;j++){
                    NodoOrto tempOrto = rebuscar(j, i, 4);
                    if(tempOrto!=null){
                        texto.append("node"+tempOrto.x+"Y"+tempOrto.y).append(";");
                        
                    }
                }
                texto.append("}\r\n");
                for(int j=0;j<n+1;j++){
                    NodoOrto tempOrto = rebuscar(j, i, 4);
                    NodoOrto tempOrtoDer = rebuscar(j, i+1, 4);
                    if(tempOrto!=null &&tempOrtoDer!=null) texto.append("\r\n node"+tempOrto.x+"Y"+tempOrto.y).append("->").append("node"+tempOrtoDer.x+"Y"+tempOrtoDer.y);
                }
                for(int j=0;j<n+1;j++){
                    NodoOrto tempOrto = rebuscar(j, i, 4);
                    NodoOrto tempOrtoDown  = rebuscar(j+1, i, 4);
                    if(tempOrto!=null &&tempOrtoDown!=null) texto.append("\r\n node"+tempOrto.x+"Y"+tempOrto.y).append("->").append("node"+tempOrtoDown.x+"Y"+tempOrtoDown.y);
                }
            }
            texto.append("}");
            File archivo = new File("mapaf.dot");
            BufferedWriter bw;
            bw =new BufferedWriter(new FileWriter(archivo));
            bw.write(texto.toString());
            bw.close();
            Runtime.getRuntime().exec("dot -Tpng mapaf.dot -o mapaf.png");
            Runtime.getRuntime().exec("feh mapaf.png");
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    public NodoOrto rebuscar(int x,int y, int nivel){
        if(nivel>=0){
            NodoHeader tempH =null;
            NodoOrto tempO=null;
            Nodo capita = capas.getByLvl(nivel);
            try{
                if(capita!=null) tempH= capita.mat.h.buscar(x);
                if(tempH!=null) tempO=tempH.column.get(y);
                if(tempO==null) return rebuscar(x,y,nivel-1);
                else return tempO;
            }catch (Exception ex){
                return rebuscar(x,y,nivel-1);
            }
            
        }
        return null;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbCapas;
    private javax.swing.JComboBox<String> cbPlayers;
    private javax.swing.JComboBox<String> cbShip;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtIdTropa;
    private javax.swing.JTextArea txtLog;
    private javax.swing.JTextField txtX;
    private javax.swing.JTextField txtY;
    private javax.swing.JTextField txtY1;
    // End of variables declaration//GEN-END:variables
}
